#!/bin/bash

# BEGIN UTILS

timestamp() {
	date +%s
}

export -f timestamp

number_only() {
	sed 's/[^0-9]*//g'
}

export -f number_only

is_installed() {
	if ! [ -x "$(command -v $1)" ]; then
		echo "Error: $1 is not installed." >&2
		return 1
	fi
}

export -f is_installed

find_process_port() {
	local PORT=$1

	if is_installed "ss"; then
		if INFO=$(ss -tulpn | grep -E 'LISTEN.*:'$PORT); then
			INFO=$(echo $INFO | cut -f7 -d' ')

			if [ ! -z $INFO ]; then
				echo $INFO | awk -v port=$PORT 'match($0, /\("([[:alpha:]]*)",pid=([[:digit:]]*),fd=[[:digit:]]*\)/, m) { print m[2], m[1], port }'
			else
				echo "- - $PORT"
			fi
		fi

		return
	fi

	if is_installed "netstat"; then
		if INFO=$(netstat -tulpn 2>/dev/null | grep -E ':'$PORT'.*LISTEN'); then
			echo $INFO | cut -f7 -d' ' | awk -v port=$PORT -v FS='/' '{ print !$2 ? "-" : $1, !$2 ? "-" : $2, port }'
		fi

		return
	fi
}

export -f find_process_port

# END UTILS

# BEGIN LOGGER

log() {
	if [ $NOCOLOR -eq 0 ]; then
		echo "$@" | sed \
			-e "s/@red/$(tput setaf 1)/g" \
			-e "s/@green/$(tput setaf 2)/g" \
			-e "s/@yellow/$(tput setaf 3)/g" \
			-e "s/@blue/$(tput setaf 4)/g" \
			-e "s/@magenta/$(tput setaf 5)/g" \
			-e "s/@cyan/$(tput setaf 6)/g" \
			-e "s/@white/$(tput setaf 7)/g" \
			-e "s/@reset/$(tput sgr0)/g" \
			-e "s/@b/$(tput bold)/g" \
			-e "s/@u/$(tput sgr 0 1)/g"
	else
		echo "$@" | sed \
			-e "s/@red//g" \
			-e "s/@green//g" \
			-e "s/@yellow//g" \
			-e "s/@blue//g" \
			-e "s/@magenta//g" \
			-e "s/@cyan//g" \
			-e "s/@white//g" \
			-e "s/@reset//g" \
			-e "s/@b//g" \
			-e "s/@u//g"
	fi
}

export -f log

linf() {
	log "@b@cyan[KPF] @white$@@reset"
}

export -f linf

lwar() {
	log "@b@yellow[KPF] @white$@@reset"
}

export -f lwar

lerr() {
	log "@b@red[KPF] @white$@@reset"
}

export -f lerr

# END LOGGER

# BEGIN AUX

kpf_remote_version() {
	curl --silent https://api.github.com/repos/supermock/kpf/releases/latest | jq -r .tag_name
}

export -f kpf_remote_version

kpf_update_kube_port_forwardrc() {
   if [[ $(jq 'has("update")' $KUBE_PORT_FORWARDRC) == "false" ]]; then
      local TMPFILE=$(mktemp)
      jq '. + {"update": { "has": false, "next_has": 0, "warn": true, "next_warn": 0 }}' $KUBE_PORT_FORWARDRC > $TMPFILE
      mv "$TMPFILE" "$KUBE_PORT_FORWARDRC"
   fi
}

export -f kpf_update_kube_port_forwardrc

kpf_has_update() {
	local CURRENT_VERSION=$(echo $VERSION | number_only)
	local LATEST_VERSION=$(kpf_remote_version | number_only)

	if [[ $LATEST_VERSION -le $CURRENT_VERSION ]]; then
		return 1
	fi
}

export -f kpf_has_update

kpf_check_update() {
   if [[ $(jq -r '.update.has' $KUBE_PORT_FORWARDRC) == "false" ]]; then
      if [ $(timestamp) -gt $(jq -r '.update.next_has' $KUBE_PORT_FORWARDRC) ]; then
         if kpf_has_update; then
            local TMPFILE=$(mktemp)
            jq '.update.has = true' $KUBE_PORT_FORWARDRC > $TMPFILE
            mv "$TMPFILE" "$KUBE_PORT_FORWARDRC"
         else
            local TMPFILE=$(mktemp)
            jq --arg next_has $(($(timestamp) + 10800)) '.update.next_has = $next_has' $KUBE_PORT_FORWARDRC > $TMPFILE
            mv "$TMPFILE" "$KUBE_PORT_FORWARDRC"
         fi
      fi
   fi

   if [[ $(jq -r '.update.has' $KUBE_PORT_FORWARDRC) == "true" ]]; then
      if [[ $(jq -r '.update.warn' $KUBE_PORT_FORWARDRC) == "true" ]]; then
         if [ $(timestamp) -gt $(jq -r '.update.next_warn' $KUBE_PORT_FORWARDRC) ]; then
            local REMOTE_VERSION=$(kpf_remote_version)
            linf "New version available... Use: @yellowkpf update ${REMOTE_VERSION:1}"

            local TMPFILE=$(mktemp)
            jq --arg next_warn $(($(timestamp) + 432000)) '.update.next_warn = $next_warn' $KUBE_PORT_FORWARDRC > $TMPFILE
            mv "$TMPFILE" "$KUBE_PORT_FORWARDRC"
         fi
      fi
   fi
}

export -f kpf_check_update

kpf_list_output() {
	awk -v FS=" " -v cols=`tput cols` -f <(cat - <<-'EOF'
		function h(size) {
			return gensub(/ /, "=", "g", sprintf("%-*s", size, ""))
		}
		function table(columns) {
			return sprintf("%-*s%-*s%-*s%-*s%-*s%-*s", 
					columns["s1"], columns["c1"],
					columns["s2"], columns["c2"],
					columns["s3"], columns["c3"],
					columns["s4"], columns["c4"],
					columns["s5"], columns["c5"],
					columns["s6"], columns["c6"])
		}
		function rm_quote(text) {
			return gensub(/"/, "", "g", text)
		}
		function color(text) {
			cmd = "log "text
			cmd | getline out
			close(cmd)

			return out
		}
		function ellipsis(text, maxsize) {
			if (length(text) > maxsize) {
					return substr(text, 1, maxsize-4)"... "
			}
			
			return text
		}
		BEGIN {
			print color("@b@white"h(cols)"@reset")

			mlen = int(cols/6)
			color_compensation = ENVIRON["NOCOLOR"] == 0 ? 9 : 0

			columns["s1"] = int(mlen/2) + color_compensation
			columns["c1"] = color("@b@greenNamespace")
			columns["s2"] = int(mlen * 2)
			columns["c2"] = "Selector"
			columns["s3"] = int(mlen * 2)
			columns["c3"] = "Resource Name"
			columns["s4"] = int(mlen/2)
			columns["c4"] = "Local Port"
			columns["s5"] = int(mlen/2)
			columns["c5"] = "Cluster Port"
			columns["s6"] = int(mlen/2)
			columns["c6"] = color("Type@reset")

			print table(columns)
			print color("@b@white"h(cols)"@reset")
		} {
			columns["s1"] = int(mlen/2) + color_compensation
			columns["c1"] = color("@b@white"ellipsis(rm_quote($1), columns["s1"]))

			columns["s2"] = int(mlen * 2)
			columns["c2"] = ellipsis(rm_quote($2), columns["s2"])

			columns["s3"] = int(mlen * 2)
			columns["c3"] = ellipsis(rm_quote($3), columns["s3"])

			columns["s4"] = int(mlen/2)
			columns["c4"] = ellipsis(rm_quote($4), columns["s4"])

			columns["s5"] = int(mlen/2)
			columns["c5"] = ellipsis(rm_quote($5), columns["s5"])

			columns["s6"] = int(mlen/2)
			columns["c6"] = color(ellipsis(rm_quote($6), columns["s6"])"@reset")
			
			print table(columns)
		}
	EOF
	)
}

export -f kpf_list_output

# END AUX

# BEGIN METHODS

kpf_add() {
	if [ ! -f $KUBE_PORT_FORWARDRC ]; then
	  tee $KUBE_PORT_FORWARDRC &>/dev/null <<EOF
{
	"data": {},
	"save": {},
	"update": {
		"has": false,
		"next_has": 0,
		"warn": true,
		"next_warn": 0
	}
}
EOF
	fi

	local NAMESPACE=$1
	local SELECTOR=$2
  local LOCAL_PORT=$(echo $3 | cut -f1 -d':')
  local CLUSTER_PORT=$(echo $3 | cut -f2 -d':')
	local TYPE=$4

	if [ "$1" = "help" ] || [ "$NAMESPACE" = "" ] || [ "$SELECTOR" = "" ] || [ "$LOCAL_PORT" = "" ] || [ "$CLUSTER_PORT" = "" ]; then
		linf "Supported types:"
		linf "  - svc or service"
		linf "  - rs or replicaset"
		linf "  - deploy or deployment"
		linf "Samples:"
		linf "  - kpf add [namespace] [pod-selector]    [port]"
		linf "  - kpf add [namespace] [service-name]    [port] svc"
		linf "  - kpf add [namespace] [replicaset-name] [port] rs"
		linf "  - kpf add [namespace] [deployment-name] [port] deploy"
		linf "kpf add [namespace] [selector] [port or local_port:cluster_port] [type?]"; return 1
	fi

	if [ "$LOCAL_PORT" -lt "1024" ] && [ "$EUID" -ne 0 ]; then
		lwar "You can not run on a local port below 1024 without being root"; return 1
	fi

	local RESOURCE_NAME=""
	case $TYPE in
		deploy|deployment)
			RESOURCE_NAME=$(kubectl -n $NAMESPACE get deployments $SELECTOR 2> /dev/null)
			if [ "$RESOURCE_NAME" = "" ]; then
				lwar "$SELECTOR selector not found on deployments"; return 1
			fi
			RESOURCE_NAME="deployment/$SELECTOR"
			TYPE="deployment"
		;;
		rs|replicaset)
			RESOURCE_NAME=$(kubectl -n $NAMESPACE get rs $SELECTOR 2> /dev/null)
			if [ "$RESOURCE_NAME" = "" ]; then
				lwar "$SELECTOR selector not found on replicasets"; return 1
			fi
			RESOURCE_NAME="rs/$SELECTOR"
			TYPE="replicaset"
		;;
		svc|service)
			RESOURCE_NAME=$(kubectl -n $NAMESPACE get svc $SELECTOR 2> /dev/null)
			if [ "$RESOURCE_NAME" = "" ]; then
				lwar "$SELECTOR selector not found on services"; return 1
			fi
			RESOURCE_NAME="svc/$SELECTOR"
			TYPE="service"
		;;
		*) #pods
			RESOURCE_NAME=$(kubectl -n $NAMESPACE get pod -l $SELECTOR -o jsonpath='{.items[0].metadata.name}' 2> /dev/null)
			TYPE="pod"
			if [ "$RESOURCE_NAME" = "" ]; then
				lwar "$SELECTOR selector not found on pods"; return 1
			fi
		;;
	esac

	local PORT_STATUS=`find_process_port $LOCAL_PORT`
	local ENTRY=`jq --arg namespace $NAMESPACE --arg selector $SELECTOR '.data[$namespace][]? | select(.selector == $selector)' $KUBE_PORT_FORWARDRC`
  if [ "$ENTRY" != "" ] && [ "$PORT_STATUS" != "" ]; then
    lwar "$SELECTOR selector already has port forwarding in `echo $ENTRY | jq -r '.local_port'`"; return 0
  fi

	ENTRY=`jq --arg local_port $LOCAL_PORT '.data | keys[] as $k | .[$k][]? | select(.local_port == $local_port)' $KUBE_PORT_FORWARDRC`
  if [ "$ENTRY" != "" ] && [ "`echo $ENTRY | jq -r '.selector'`" != "$SELECTOR" ]; then
    lwar "$LOCAL_PORT already has port forwarding in namespace `echo $ENTRY | jq -r '.namespace'` and `echo $ENTRY | jq -r '.selector'` selector"; return 0
  fi

	if  [ "$ENTRY" = "" ] && [ "$PORT_STATUS" != "" ]; then
		lwar "The `echo $PORT_STATUS | cut -f2 -d' '` process is already using this port"; return 1
	fi

	local ARGS=""

	if [ "$ADDRESS" != "" ]; then
		ARGS="--address=$ADDRESS"
	fi

	(kubectl -n $NAMESPACE port-forward $ARGS $RESOURCE_NAME $LOCAL_PORT:$CLUSTER_PORT &> /dev/null &) &
	local return_code=$?
	if [ $return_code -ne 0 ]; then
		lerr "Failed to start port forwarding. Exit status: $return_code"; return $return_code
	fi

	if [ "$PORT_STATUS" != "" ]; then return 0; fi

	linf "Adding port forward for $SELECTOR->$LOCAL_PORT"

	local i=0
	while [ $i -lt 5 ]; do
		local PORT_STATUS=`find_process_port $LOCAL_PORT`
		if [ "$PORT_STATUS" != "" ]; then
			if [ "$ENTRY" = "" ]; then
				if [ "`jq --arg namespace $NAMESPACE '.data[$namespace]?' $KUBE_PORT_FORWARDRC`" = "" ]; then
					local TMPFILE=$(mktemp)
					jq --arg namespace "$NAMESPACE" '.data += {($namespace): []}' $KUBE_PORT_FORWARDRC > $TMPFILE
					mv "$TMPFILE" $KUBE_PORT_FORWARDRC
				fi

				local RESOURCE_NAME_COLUMN=$([ "$ADDRESS" = "" ] && echo "5" || echo "6")
				RESOURCE_NAME=`ps -p $(echo $PORT_STATUS | cut -f1 -d' ') -o args --no-headers | cut -f$RESOURCE_NAME_COLUMN -d' '`
				local TMPFILE=$(mktemp)
				jq \
				--arg namespace "$NAMESPACE" \
				--arg selector "$SELECTOR" \
				--arg resource_name "$RESOURCE_NAME" \
				--arg local_port $LOCAL_PORT \
				--arg cluster_port $CLUSTER_PORT \
				--arg type $TYPE \
				'.data[$namespace] += [{ "namespace": $namespace, "selector": $selector, "resource_name": $resource_name, "local_port": $local_port, "cluster_port": $cluster_port, "type": $type }]' $KUBE_PORT_FORWARDRC > $TMPFILE
				mv "$TMPFILE" $KUBE_PORT_FORWARDRC
			else
				local TMPFILE=$(mktemp)
				jq \
				--arg namespace "$NAMESPACE" \
				--arg selector "$SELECTOR" \
				--arg resource_name "$RESOURCE_NAME" \
				'(.data[$namespace][] | select(.selector == $selector) | .resource_name) |= $resource_name' $KUBE_PORT_FORWARDRC > $TMPFILE
				mv "$TMPFILE" $KUBE_PORT_FORWARDRC
			fi

			linf "kpf add success! $SELECTOR->$LOCAL_PORT"; return 0
		fi
		linf "Waiting for the forward to stay active. `expr $i + 1`/5 tries... Next try in 3s"
		i=`expr $i + 1`
		sleep 3
	done

	lerr "Maximum failed attempts reached"; return 1
}

export -f kpf_add

kpf_del() {
  local NAMESPACE=$1
  local SELECTOR=$2

	if [ "$1" = "help" ] || [ "$NAMESPACE" = "" ] || [ "$SELECTOR" = "" ]; then
		linf "kpf del [namespace] [selector]"; return 1
	fi

  local FIND_EXP=".data["'$namespace'"][]? | select(.selector == "'$selector'")"
  local ENTRY=`eval jq --arg namespace $NAMESPACE --arg selector $SELECTOR "'$FIND_EXP'" $KUBE_PORT_FORWARDRC`
  if [ "$ENTRY" != "" ]; then
    local PORT_STATUS=`find_process_port $(echo $ENTRY | jq -r '.local_port')`
    if [ "$PORT_STATUS" != "" ]; then #finded
      local PID_PROCESS=`echo $PORT_STATUS | cut -f1 -d' '`
      kill -15 $PID_PROCESS
      if [ $? -ne 0 ]; then
        lerr "Failed on kill $SELECTOR listener"; return 1
      fi
    fi

		local TMPFILE=$(mktemp)
		eval jq --arg namespace $NAMESPACE --arg selector $SELECTOR "'del($FIND_EXP)'" $KUBE_PORT_FORWARDRC > $TMPFILE
		mv "$TMPFILE" $KUBE_PORT_FORWARDRC

		if [ `jq --arg namespace $NAMESPACE '.data[$namespace] | length' $KUBE_PORT_FORWARDRC` -eq 0 ]; then
			local TMPFILE=$(mktemp)
			jq --arg namespace $NAMESPACE 'del(.data[$namespace])' $KUBE_PORT_FORWARDRC > $TMPFILE
			mv "$TMPFILE" $KUBE_PORT_FORWARDRC
			linf "No more port forwarding from the $NAMESPACE namespace"
		fi

		linf "kpf del success! $SELECTOR"
  else
    lwar "$SELECTOR selector does not have port forwarding"
  fi
}

export -f kpf_del

kpf_delall() {
	if [ "$1" = "help" ]; then
		linf "kpf delall"; return 1
	fi

	jq -r \
    '.data | keys[] as $k | .[$k][]? | [.namespace, .selector] | @tsv' $KUBE_PORT_FORWARDRC | \
		xargs -I{} bash -c "kpf_del {}"
}

export -f kpf_delall

kpf_list() {
  local NAMESPACE=$1

	if [ "$1" = "help" ]; then
		linf "kpf list [namespace?]"; return 1
	fi

	if [ `jq '.data | length' $KUBE_PORT_FORWARDRC` -eq 0 ]; then
		linf "There are no active port forwarders"; return 0
	fi

  if [ -z $NAMESPACE ]; then
    jq -r \
    '.data | keys[] as $k | .[$k][]? | [.namespace, .selector, .resource_name, .local_port, .cluster_port, .type] | @tsv' $KUBE_PORT_FORWARDRC | \
    kpf_list_output
  else
		if [ `jq --arg namespace $NAMESPACE '.data[$namespace] | length' $KUBE_PORT_FORWARDRC` -eq 0 ]; then
			linf "There are no active port forwarders for namespace $NAMESPACE"; return 0
		fi

    jq -r \
		--arg namespace "$NAMESPACE" \
		'.data[$namespace][]? | [.namespace, .selector, .resource_name, .local_port, .cluster_port, .type] | @tsv' $KUBE_PORT_FORWARDRC | \
		kpf_list_output
  fi
}

export -f kpf_list

kpf_update() {
	local NEW_VERSION="v$1"

	local URL="https://github.com/supermock/kpf/releases/download/$NEW_VERSION/kpf"
	local CURRENT_PATH=$0
	local OUTPUT_PATH=/tmp/kpf

	if [ "$1" = "help" ] || [ "$NEW_VERSION" = "v" ]; then
		linf "kpf update [version]"; return 1
	fi

	if [ "$(curl -Lo /dev/null -s -w "%{http_code}\n" $URL)" = "404" ]; then 
		lerr "Failed on update! Version $NEW_VERSION not found. See more: https://github.com/supermock/kpf/releases"; return 1
	fi

	linf "Downloading from $URL"

	local SUDO=$([ "$(stat -c '%G' $CURRENT_PATH)" = "root" ] && echo sudo)

	curl --silent -Lo $OUTPUT_PATH $URL

	echo "Updating script at $CURRENT_PATH..."
	$SUDO mv $OUTPUT_PATH $CURRENT_PATH

	echo "Giving execute permission to new version..."
	$SUDO chmod +x $CURRENT_PATH

	linf "kpf update success!"
}

export -f kpf_update

kpf_state_save() {
	local SAVE_NAME=$1

	if [ "$1" = "help" ] || [ "$SAVE_NAME" = "" ]; then
		linf "kpf state save [save_name]"; return 1
	fi

	if [ `jq '.data | length' $KUBE_PORT_FORWARDRC` -eq 0 ]; then
		linf "There are no active port forwarders"; return 0
	fi

	local TMPFILE=$(mktemp)
	jq --arg save_name "$SAVE_NAME" '.save += {($save_name): .data}' $KUBE_PORT_FORWARDRC > $TMPFILE
	mv "$TMPFILE" $KUBE_PORT_FORWARDRC

	linf "kpf state save success!"
}

export -f kpf_state_save

kpf_state_restore() {
	local SAVE_NAME=$1

	if [ "$1" = "help" ] || [ "$SAVE_NAME" = "" ]; then
		linf "kpf state restore [save_name]"; return 1
	fi

	local ENTRY=`jq --arg save_name $SAVE_NAME '.save[$save_name]' $KUBE_PORT_FORWARDRC`
	if [ "$ENTRY" = "null" ]; then
		lwar "The save $SAVE_NAME does not exist"; return 1
	fi

	jq -r \
	--arg save_name "$SAVE_NAME" \
    '.save[$save_name] | keys[] as $k | .[$k][]? | [.namespace, .selector, .local_port, .cluster_port, .type] | @tsv' $KUBE_PORT_FORWARDRC | \
		xargs printf "%s %s %s:%s %s\n" | \
		xargs -I{} bash -c "kpf_add {}"

		linf "kpf state restore success!"
}

export -f kpf_state_restore

kpf_state_remove() {
	local SAVE_NAME=$1

	if [ "$1" = "help" ] || [ "$SAVE_NAME" = "" ]; then
		linf "kpf state remove [save_name]"; return 1
	fi

	local ENTRY=`jq --arg save_name $SAVE_NAME '.save[$save_name]' $KUBE_PORT_FORWARDRC`
	if [ "$ENTRY" = "null" ]; then
		lwar "The save $SAVE_NAME does not exist"; return 1
	fi

	local TMPFILE=$(mktemp)
	jq --arg save_name "$SAVE_NAME" 'del(.save[$save_name])' $KUBE_PORT_FORWARDRC > $TMPFILE
	mv "$TMPFILE" $KUBE_PORT_FORWARDRC

	linf "kpf state remove success!"
}

export -f kpf_state_remove

kpf_state_list() {
	local SAVE_NAME=$1

	if [ "$1" = "help" ]; then
		linf "kpf state list [save_name?]"; return 1
	fi

	if [ -z $SAVE_NAME ]; then
		if [ "$(jq -r '.save | keys | length' $KUBE_PORT_FORWARDRC)" = "0" ]; then
			linf "There are no saves to list"; return 0
		fi

		jq -r \
		'.save | keys | @csv' $KUBE_PORT_FORWARDRC | \
		xargs -d "," -I{} bash -c "echo; kpf_state_list {}"
  else
		local ENTRY=`jq --arg save_name $SAVE_NAME '.save[$save_name]' $KUBE_PORT_FORWARDRC`
		if [ "$ENTRY" = "null" ]; then
			lwar "The save $SAVE_NAME does not exist"; return 1
		fi

    jq -r \
		--arg save_name "$SAVE_NAME" \
		'.save[$save_name] | keys[] as $k | .[$k][]? | [.namespace, .selector, .local_port, .cluster_port, .type] | @tsv' $KUBE_PORT_FORWARDRC | \
		awk -v FS=" " -v savename="$SAVE_NAME" -v cols=`tput cols` -f <(cat - <<-'EOF'
			function h(size) {
				return gensub(/ /, "=", "g", sprintf("%-*s", size, ""))
			}
			function table(columns) {
				return sprintf("%-*s%-*s%-*s%-*s%-*s", 
						columns["s1"], columns["c1"],
						columns["s2"], columns["c2"],
						columns["s3"], columns["c3"],
						columns["s4"], columns["c4"],
						columns["s5"], columns["c5"])
			}
			function rm_quote(text) {
				return gensub(/"/, "", "g", text)
			}
			function color(text) {
				cmd = "log "text
				cmd | getline out
				close(cmd)

				return out
			}
			function ellipsis(text, maxsize) {
				if (length(text) > maxsize) {
						return substr(text, 1, maxsize-4)"... "
				}
				
				return text
			}
			BEGIN {
				print color("@b@white"savename), color(h(cols - length(savename) - 1)"@reset")

				mlen = int(cols/5)
				color_compensation = ENVIRON["NOCOLOR"] == 0 ? 9 : 0

				columns["s1"] = mlen + color_compensation
				columns["c1"] = color("@b@greenNamespace")
				columns["s2"] = int(mlen + mlen/2)
				columns["c2"] = "Selector"
				columns["s3"] = mlen
				columns["c3"] = "Local Port"
				columns["s4"] = mlen
				columns["c4"] = "Cluster Port"
				columns["s5"] = int(mlen/2)
				columns["c5"] = color("Type@reset")

				print table(columns)
				print color("@b@white"h(cols)"@reset")
			} {
				columns["s1"] = mlen + color_compensation
				columns["c1"] = color("@b@white"ellipsis(rm_quote($1), columns["s1"]))
				columns["s2"] = int(mlen + mlen/2)
				columns["c2"] = ellipsis(rm_quote($2), columns["s2"])
				columns["s3"] = mlen
				columns["c3"] = ellipsis(rm_quote($3), columns["s3"])
				columns["s4"] = mlen
				columns["c4"] = ellipsis(rm_quote($4), columns["s4"])
				columns["s5"] = int(mlen/2)
				columns["c5"] = color(ellipsis(rm_quote($5), columns["s5"])"@reset")
				
				print table(columns)
			}
		EOF
		)
  fi
}

export -f kpf_state_list

# END METHODS

# BEGIN CHECK DEPENDENCIES

dependencies="kubectl jq"

for dep in $dependencies; do
  if ! is_installed $dep; then exit 1; fi
done

# END CHECK DEPENDENCIES

# BEGIN CLI ---------------------------------------------
export VERSION="v1.3.0"
export KUBE_PORT_FORWARDRC=${KUBE_PORT_FORWARDRC:-"$HOME/.config/kube_port_forwardrc"}

# Options
export ADDRESS=""
export NOCOLOR=0

run_cmd() {
  local CMD=$1
  shift

  if [ "$CMD" != "add" ]; then
    if [ ! -f $KUBE_PORT_FORWARDRC ]; then
      linf "First do port forwarding"; return 1
    fi
  fi

  case "$CMD" in
    add)
			kpf_add $@
    ;;
		del)
			kpf_del $@
		;;
		delall)
			kpf_delall $@
		;;
		list)
			kpf_list $@
		;;
		update)
			kpf_update $@
		;;
		state)
			local SUBCMD=$1

			if [ "$SUBCMD" = "help" ] || [ "$SUBCMD" = "" ]; then
				linf "kpf state [subcmd]"; return 1
			fi

			shift
			case "$SUBCMD" in
				save)
					kpf_state_save $@
				;;
				restore)
					kpf_state_restore $@
				;;
				remove)
					kpf_state_remove $@
				;;
				list)
					kpf_state_list $@
				;;
				*)
					lwar "Command $SUBCMD not found"
				;;
			esac
		;;
    *)
      lwar "Command $CMD not found"
    ;;
  esac
}

usage() {
  awk -v pn="KUBE PORT FORWARD" -v cols=`tput cols` 'BEGIN{for(c=0;c<cols;c++) if(c == (cols/2 - (length(pn)+2)/2)) { printf " %s ", pn; cols=cols-length(pn)-1 } else { printf "=" }; printf ORS }'
  echo
  echo "Usage: kpf [OPTIONS] COMMAND SUBCMD"
  echo
  echo "Options:"
  echo "  -h, --help               See this"
  echo "  -v, --version            Print version information and quit"
	echo "  -a, --address            Addresses to listen on comma separated (Only for add command)"
  echo
  echo "Commands:"
  echo "  add           Adds a new port forwarding"
  echo "  del           Removes an existing port forwarding"
  echo "  delall        Removes all existing port forwarders"
  echo "  list          Lists all port forwarding performed"
	echo "  update        Update the kpf to the version provided"
	echo "  state         Access to state control commands"
  echo "     ∟ save          Saves the current state of the port forwarding list"
  echo "     ∟ restore       Restores the state that was saved from the port forward list"
	echo "     ∟ remove        Removes the state that was saved from the port forward list"
	echo "     ∟ list          List the state that was saved from the port forward list"
  echo
  echo "Run 'kpf -h COMMAND SUBCMD' for more information on a command."
  echo
  awk -v cols=`tput cols` 'BEGIN{for(c=0;c<cols;c++) printf "="; printf ORS }'
  exit 0
}

if [ $# -eq 0 ]; then
  usage
fi

if [ -f $KUBE_PORT_FORWARDRC ]; then
	kpf_update_kube_port_forwardrc
	kpf_check_update
fi

while [ ! $# -eq 0 ]
do
	case "$1" in
    --version | -v)
			linf $VERSION
    ;;
		--help | -h)
      if [ -z $2 ]; then
        usage
      else
				shift
        run_cmd $@ help
        break
      fi
    ;;
		--address | -a)
			ADDRESS=$2
			shift
		;;
		--no-color)
			NOCOLOR=1
		;;
    *)
      if [[ "$1" == "-"* || "$1" == "--"* ]]; then
        lerr "Invalid option: $1" >&2
        exit 1
      fi

			run_cmd $@
      break
    ;;
	esac
	shift
done

# END CLI  ----------------------------------------------
